/** Declaration file generated by dts-gen */

export class BaseClientComponent {
    constructor(...args: any[]);

    checkImportFile(...args: any[]): void;

    importFile(...args: any[]): void;

    importFileCheck(...args: any[]): void;

    readList(...args: any[]): void;

}

export class BaseDBComponent {
    constructor(...args: any[]);

    associate(...args: any[]): void;

    bulkCreate(...args: any[]): void;

    bulkUpsert(...args: any[]): void;

    checkFilterValue(...args: any[]): void;

    create(...args: any[]): void;

    delete(...args: any[]): void;

    getRelationObjects(...args: any[]): void;

    getWhereObjects(...args: any[]): void;

    mapNestedRelations(...args: any[]): void;

    mapRelations(...args: any[]): void;

    parseDereferencedObjectValues(...args: any[]): void;

    read(...args: any[]): void;

    readList(...args: any[]): void;

    restoreAttributesFromMapRecursively(...args: any[]): void;

    saveImage(...args: any[]): void;

    setFilterValue(...args: any[]): void;

    setOrderDataForRelation(...args: any[]): void;

    setQueryDataForRelation(...args: any[]): void;

    stripAndMapAttributesFromOptionsObjectRecursively(...args: any[]): void;

    update(...args: any[]): void;

}

export class CodeGenerator {
    constructor(...args: any[]);

    buildLayoutFile(...args: any[]): void;

    checkConfig(...args: any[]): void;

    checkOutputPath(...args: any[]): void;

    generateBasicProject(...args: any[]): void;

    generateBlankProject(...args: any[]): void;

    generateCommonConfigFile(...args: any[]): void;

    generateConfigFile(...args: any[]): void;

    generateDocs(...args: any[]): void;

    generateFolders(...args: any[]): void;

    generateGitignore(...args: any[]): void;

    generateImagesRedirectNGINXConfig(...args: any[]): void;

    generateIndexConfigFile(...args: any[]): void;

    generateLayoutFile(...args: any[]): void;

    generateNGINXConfig(...args: any[]): void;

    generateProfileConfigFile(...args: any[]): void;

    generateProjectMainFile(...args: any[]): void;

    generateTypescriptModels(...args: any[]): void;

    generateWebpackBuildTools(...args: any[]): void;

    generateWebpackConfig(...args: any[]): void;

}

export class Core {
    constructor(...args: any[]);

    listen(...args: any[]): void;

    loadAPIs(...args: any[]): void;

    loadCRONJobs(...args: any[]): void;

    loadClients(...args: any[]): void;

    loadDB(...args: any[]): void;

    loadDependencies(...args: any[]): void;

    loadMailClient(...args: any[]): void;

    loadMigrations(...args: any[]): void;

    runLintTests(...args: any[]): void;

    runTests(...args: any[]): void;

    startAllCronJobs(...args: any[]): void;

    stopAllCronJobs(...args: any[]): void;

}

export function BaseAPIComponent(...args: any[]): void;

export namespace codeGenerator {
    const configRequiredForMethods: string[];

    const pgToTSMap: {
        bigint: string;
        bigserial: string;
        bit: string;
        bool: string;
        boolean: string;
        box: string;
        bytea: string;
        char: string;
        character: string;
        "character varying": string;
        cidr: string;
        cirle: string;
        date: string;
        decimal: string;
        "double precision": string;
        float8: string;
        inet: string;
        int: string;
        int2: string;
        int4: string;
        int8: string;
        integer: string;
        interval: string;
        json: string;
        jsonb: string;
        line: string;
        lseg: string;
        macaddr: string;
        money: string;
        numeric: string;
        path: string;
        pg_lsn: string;
        point: string;
        polygon: string;
        real: string;
        serial: string;
        serial2: string;
        serial4: string;
        serial8: string;
        smallint: string;
        smallserial: string;
        text: string;
        time: string;
        timestamp: string;
        timestamptz: string;
        timetz: string;
        tsquery: string;
        tsvector: string;
        txid_snapshot: string;
        "user-defined": string;
        uuid: string;
        varbit: string;
        varchar: string;
        xml: string;
    };

    function buildLayoutFile(...args: any[]): void;

    function checkConfig(...args: any[]): void;

    function checkOutputPath(...args: any[]): void;

    function generateBasicProject(...args: any[]): void;

    function generateBlankProject(...args: any[]): void;

    function generateCommonConfigFile(...args: any[]): void;

    function generateConfigFile(...args: any[]): void;

    function generateDocs(...args: any[]): void;

    function generateFolders(...args: any[]): void;

    function generateGitignore(...args: any[]): void;

    function generateImagesRedirectNGINXConfig(...args: any[]): void;

    function generateIndexConfigFile(...args: any[]): void;

    function generateLayoutFile(...args: any[]): void;

    function generateNGINXConfig(...args: any[]): void;

    function generateProfileConfigFile(...args: any[]): void;

    function generateProjectMainFile(...args: any[]): void;

    function generateTypescriptModels(...args: any[]): void;

    function generateWebpackBuildTools(...args: any[]): void;

    function generateWebpackConfig(...args: any[]): void;

    function testBuildLayoutFile(): any;

    function testCheckConfig(): void;

    function testCheckOutputPath(): any;

    function testGenerateBasicProject(): any;

    function testGenerateBlankProject(): any;

    function testGenerateCommonConfigFile(): any;

    function testGenerateConfigFile(): any;

    function testGenerateDocs(): any;

    function testGenerateFolders(): any;

    function testGenerateGitignore(): any;

    function testGenerateImagesRedirectNGINXConfig(): any;

    function testGenerateIndexConfigFile(): any;

    function testGenerateLayoutFile(): any;

    function testGenerateNGINXConfig(): any;

    function testGenerateProfileConfigFile(): any;

    function testGenerateProjectMainFile(): any;

    function testGenerateTypescriptModels(ramster: any): any;

    function testGenerateWebpackBuildTools(): any;

    function testGenerateWebpackConfig(): any;

    function testMe(ramster: any): void;

}

export namespace csvPromise {
    function parse(...args: any[]): void;

    function stringify(...args: any[]): void;

    function testMe(): void;

    function testParse(): any;

    function testStringify(): any;

}

export namespace toolbelt {
    function arraySort(array: any, orderBy: any, caseSensitiveOption: any): any;

    function changeKeyCase(keyMap: any, input: any, outputType: any): any;

    function checkRoutes(route: any, routes: any): any;

    function decodeQueryValues(object: any): any;

    function describeSuiteConditionally(condition: any, suiteText: any, suiteMethod: any): any;

    function emptyToNull(data: any): any;

    function findVertexByIdDFS(vertexId: any, graph: any, action: any): any;

    function generateRandomNumber(length: any): any;

    function generateRandomString(length: any, stringType: any): any;

    function getFolderSize(folderPath: any, unit: any): any;

    function getNested(parent: any, field: any): any;

    function parseDate(date: any): any;

    function runTestConditionally(condition: any, testText: any, testMethod: any): any;

    function setNested(parent: any, field: any, value: any): any;

}

